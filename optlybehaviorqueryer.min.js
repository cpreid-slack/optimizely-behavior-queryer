var behavior=function(){var b_api=optimizely.get("behavior"),fieldGroups={general:["type","name","category"],numeric:["time","age","revenue"]},comparatorGroups={numeric:["gt","gte","lt","lte","between"],general:["eq","is","in","contains","exists"]},getComparators=function(field){return fieldGroups.numeric.indexOf(field)>-1?comparatorGroups.general.concat(comparatorGroups.numeric):comparatorGroups.general},isTag=function(field){return fieldGroups.general.indexOf(field)<0&&fieldGroups.numeric.indexOf(field)<0},Queryer=function(){var q={version:"0.2"},resultsCallbacks=[];this.has_computational_aggregator=function(){return void 0!==q.reduce&&"undefined"!==q.reduce.aggregator&&"nth"!==q.reduce.aggregator},this.set_q_part=function(key,val){q[key]=val},this.delete_q_part=function(key){delete q[key]},this.addFilter=function(filter){return"filter"in q||(q.filter=[]),q.filter.push(filter),this},this.addSort=function(sortrule){if(this.has_computational_aggregator())throw"Cannot use sort with `compute`";return"sort"in q||(q.sort=[]),q.sort.push(sortrule),this},this.addComputationalAggregator=function(aggregate_fnc,aggregate_field){if(!aggregate_fnc||!aggregate_field)throw"aggregate_fnc && aggregate_field must be used in compute";this.setAggregator(aggregate_fnc),this.pick(aggregate_field)},this.addCallback=function(fcn){return resultsCallbacks.push(fcn),this},this.run=function(log_query){this.has_computational_aggregator()||"sort"in q||this.orderBy("time","descending"),log_query&&console.log(q);var results=b_api.query(q);return resultsCallbacks&&resultsCallbacks.forEach(function(fcn){results=fcn.call(null,results)}),results}};return Queryer.prototype={uniques:function(field){if(this.has_computational_aggregator())throw"Cannot fetch uniques when using computational";if(!field)throw"Field is a required argument for `uniques` method";return this.addCallback(function(results){var pieces=field.split(/\./),uniqueFieldValues=[];return(results=results||[]).filter(function(item){try{if(pieces.length>1)possibleUniqueValue=item[pieces[0]][pieces[1]];else var possibleUniqueValue=item[pieces[0]]}catch(err){throw"Unable to get `"+field+"` within results item ("+typeof item+")."}return uniqueFieldValues.indexOf(possibleUniqueValue)<0&&(uniqueFieldValues.push(possibleUniqueValue),!0)})}),this},setAggregator:function(fnc,params){var reducer={aggregator:fnc};for(var p in params||{})reducer[p]=params[p];return this.set_q_part("reduce",reducer),this},pick:function(field){return field=isTag(field)?["tags",field]:[field],this.set_q_part("pick",{field:field}),this},where:function(field,comparator,val){var availablecomparators=getComparators(field);if(comparator=comparator||"exists",availablecomparators.indexOf(comparator)<0)throw"comparator ("+comparator+") not valid for field: "+field;if("exists"!==comparator&&void 0===val)throw"you need a value when using comparator: "+comparator;var filter={field:field=isTag(field)?["tags",field]:[field],comparator:comparator};return"exists"!==comparator&&(filter.value=val),this.addFilter(filter),this},type:function(types){var filter={field:["type"],value:types};return types instanceof Array&&(filter.comparator="in"),this.addFilter(filter),this},orderBy:function(field,direction){return this.addSort({field:[field||"time"],direction:direction||"descending"}),this}},{compute:function(aggregate_fnc,aggregate_field){var queryer=new Queryer;return queryer.addComputationalAggregator(aggregate_fnc,aggregate_field),queryer},find:function(types){var queryer=new Queryer;return types&&queryer.type(types),queryer},findOne:function(types){var queryer=this.find(types);return queryer.setAggregator("nth",{n:0}),queryer},hasConvertedOn:function(event_namespace){try{var type=event_namespace.split(".")[0],name=event_namespace.split(".")[1];return!!this.findOne(type).where("name","is",name).run()}catch(e){return!1}}}}();